#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–†–û–°–¢–û–ô TELEGRAM –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨ –î–õ–Ø –¢–ï–õ–ï–§–û–ù–û–í
==========================================

–í–µ—Ä—Å–∏—è, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Android —á–µ—Ä–µ–∑ Termux –∏–ª–∏ Pydroid 3
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
- –ò–º–µ–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- –ù–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∫—Ä–æ–º–µ Telethon

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω (Termux –∏–ª–∏ Pydroid 3)
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install telethon
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: python mobile_easy_sender.py
"""

import os
import sys
import time
import json
import random
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# API –¥–ª—è Telegram
API_ID = 1079592
API_HASH = "4b3c8eeb47a62ecc941e61907f1a7bf0"

# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
CONFIG_FILE = "telegram_config.json"
SESSIONS_DIR = "telegram_sessions"
RECIPIENTS_FILE = "recipients.txt"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Telethon
try:
    from telethon.sync import TelegramClient
    from telethon.errors import FloodWaitError, SessionPasswordNeededError
except ImportError:
    print("\n‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π:")
    print("pip install telethon")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Android
IS_ANDROID = False
try:
    if "ANDROID_ROOT" in os.environ or "ANDROID_DATA" in os.environ:
        IS_ANDROID = True
        print("üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Android —Å–∏—Å—Ç–µ–º–∞")
except:
    pass

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if not os.path.exists(SESSIONS_DIR):
    os.makedirs(SESSIONS_DIR)

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
class Account:
    def __init__(self, name="", phone="", session_name=""):
        self.name = name
        self.phone = phone
        self.session_name = session_name or self._generate_session_name(phone)
        self.client = None
    
    def _generate_session_name(self, phone):
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Å–µ—Å—Å–∏–∏ –∏–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone:
            import uuid
            return f"session_{uuid.uuid4().hex[:8]}"
        return f"session_{phone.replace('+', '').replace(' ', '')}"
    
    def get_session_path(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏"""
        return os.path.join(SESSIONS_DIR, self.session_name)
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram API"""
        if self.client:
            self.disconnect()
        
        try:
            self.client = TelegramClient(self.get_session_path(), API_ID, API_HASH)
            self.client.connect()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Telegram API"""
        if self.client:
            try:
                self.client.disconnect()
            except:
                pass
            self.client = None
    
    def is_authorized(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç"""
        if not self.client:
            return False
        
        try:
            return self.client.is_user_authorized()
        except:
            return False
    
    def get_me(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.client or not self.is_authorized():
            return None
        
        try:
            return self.client.get_me()
        except:
            return None
    
    def login(self, phone=None, code_callback=None, password_callback=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
            code_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            password_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è 2FA
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        """
        if not self.client:
            if not self.connect():
                return False
        
        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.is_authorized():
            me = self.get_me()
            if me:
                self.name = f"{me.first_name} {me.last_name or ''}".strip()
                if me.username:
                    self.name += f" (@{me.username})"
                self.phone = me.phone or self.phone
            return True
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
        phone = phone or self.phone
        if not phone:
            logger.error("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return False
        
        self.phone = phone
        
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä {phone}")
            self.client.send_code_request(phone)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not code_callback:
                logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")
                return False
            
            code = code_callback()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
            try:
                self.client.sign_in(phone, code)
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                me = self.get_me()
                if me:
                    self.name = f"{me.first_name} {me.last_name or ''}".strip()
                    if me.username:
                        self.name += f" (@{me.username})"
                    self.phone = me.phone or self.phone
                
                return True
                
            except SessionPasswordNeededError:
                # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if not password_callback:
                    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è")
                    return False
                
                password = password_callback()
                self.client.sign_in(password=password)
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                me = self.get_me()
                if me:
                    self.name = f"{me.first_name} {me.last_name or ''}".strip()
                    if me.username:
                        self.name += f" (@{me.username})"
                    self.phone = me.phone or self.phone
                
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
            return False
    
    def logout(self):
        """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram"""
        if not self.client or not self.is_authorized():
            return False
        
        try:
            result = self.client.log_out()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            session_file = f"{self.get_session_path()}.session"
            if os.path.exists(session_file):
                os.remove(session_file)
            
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
            return False
    
    def send_message(self, recipient, message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        
        Args:
            recipient (str): –ü–æ–ª—É—á–∞—Ç–µ–ª—å (username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.client or not self.is_authorized():
            return False
        
        try:
            self.client.send_message(recipient, message)
            return True
        except FloodWaitError as e:
            logger.warning(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É, –∂–¥–µ–º {e.seconds} —Å–µ–∫")
            time.sleep(e.seconds)
            
            # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            try:
                self.client.send_message(recipient, message)
                return True
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e2}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            "name": self.name,
            "phone": self.phone,
            "session_name": self.session_name
        }
    
    @classmethod
    def from_dict(cls, data):
        """–°–æ–∑–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            name=data.get("name", ""),
            phone=data.get("phone", ""),
            session_name=data.get("session_name", "")
        )


# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
class Config:
    def __init__(self):
        self.accounts = []
        self.current_account_index = -1
        self.load()
    
    def load(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(CONFIG_FILE):
            return
        
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                self.accounts = [Account.from_dict(acc) for acc in data.get("accounts", [])]
                self.current_account_index = data.get("current_account_index", -1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
                if self.current_account_index >= len(self.accounts):
                    self.current_account_index = -1
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                "accounts": [acc.to_dict() for acc in self.accounts],
                "current_account_index": self.current_account_index
            }
            
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_current_account(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
        if 0 <= self.current_account_index < len(self.accounts):
            return self.accounts[self.current_account_index]
        return None
    
    def set_current_account(self, index):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
        if 0 <= index < len(self.accounts):
            self.current_account_index = index
            self.save()
            return True
        return False
    
    def add_account(self, account):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫"""
        self.accounts.append(account)
        self.current_account_index = len(self.accounts) - 1
        self.save()
    
    def remove_account(self, index):
        """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if 0 <= index < len(self.accounts):
            del self.accounts[index]
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
            if self.current_account_index >= len(self.accounts):
                self.current_account_index = len(self.accounts) - 1
            
            self.save()
            return True
        return False
    
    def scan_sessions(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–µ—Å—Å–∏—è–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π
        session_files = [f for f in os.listdir(SESSIONS_DIR) if f.endswith('.session')]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å–µ—Å—Å–∏–π –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        session_names = [os.path.splitext(f)[0] for f in session_files]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å–µ—Å—Å–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        existing_sessions = [acc.session_name for acc in self.accounts]
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
        new_sessions = [s for s in session_names if s not in existing_sessions]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        for session_name in new_sessions:
            account = Account(session_name=session_name)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if account.connect() and account.is_authorized():
                me = account.get_me()
                if me:
                    account.name = f"{me.first_name} {me.last_name or ''}".strip()
                    if me.username:
                        account.name += f" (@{me.username})"
                    account.phone = me.phone or ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                self.accounts.append(account)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–µ—Å—Å–∏–∏: {account.name}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            account.disconnect()
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if new_sessions:
            self.save()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏
def load_recipients():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(RECIPIENTS_FILE):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        with open(RECIPIENTS_FILE, 'w', encoding='utf-8') as f:
            f.write("# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π Telegram\n")
            f.write("# –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –Ω–∞ —Å—Ç—Ä–æ–∫—É\n")
            f.write("# –ü—Ä–∏–º–µ—Ä—ã:\n")
            f.write("# @username\n")
            f.write("# +79001234567\n")
        
        return []
    
    try:
        with open(RECIPIENTS_FILE, 'r', encoding='utf-8') as f:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            return [line.strip() for line in f if line.strip() and not line.strip().startswith('#')]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        return []


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
def clear_screen():
    """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    clear_screen()
    print("=" * 50)
    print("TELEGRAM –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨ –î–õ–Ø –¢–ï–õ–ï–§–û–ù–û–í")
    print("=" * 50)
    print("–í–µ—Ä—Å–∏—è 1.0 (–¥–ª—è Android) | by Replit Team")
    print("=" * 50)

def print_menu(title, options):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
    
    Args:
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é
        options (list): –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(key, text), ...]
    """
    print(f"\n{title}")
    print("-" * len(title))
    
    for key, text in options:
        print(f"{key}. {text}")


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
def login_account():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram"""
    print_header()
    print("\n=== –í–•–û–î –í –ê–ö–ö–ê–£–ù–¢ TELEGRAM ===")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å +): ")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    account = Account(phone=phone)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
    def code_callback():
        return input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    def password_callback():
        return input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
    if account.connect() and account.login(phone, code_callback, password_callback):
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç: {account.name}")
        return account
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        return None

def select_account(config):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print_header()
    print("\n=== –í–´–ë–û–† –ê–ö–ö–ê–£–ù–¢–ê ===")
    
    if not config.accounts:
        print("\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return False
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
    for i, account in enumerate(config.accounts):
        marker = "‚úì" if i == config.current_account_index else " "
        print(f"{marker} {i+1}. {account.name} ({account.phone})")
    
    try:
        choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (–Ω–æ–º–µ—Ä): ")) - 1
        
        if 0 <= choice < len(config.accounts):
            config.set_current_account(choice)
            print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {config.accounts[choice].name}")
            return True
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
    except ValueError:
        print("\n‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return False

def logout_account(config):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print_header()
    print("\n=== –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê ===")
    
    account = config.get_current_account()
    if not account:
        print("\n–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return False
    
    print(f"\n–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {account.name}")
    confirm = input("\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞? (–¥–∞/–Ω–µ—Ç): ").lower()
    
    if confirm in ["–¥–∞", "–¥", "yes", "y"]:
        if account.connect() and account.logout():
            print("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            config.remove_account(config.current_account_index)
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return True
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return False
    else:
        print("\n–í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return False

def view_recipients():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    print_header()
    print("\n=== –°–ü–ò–°–û–ö –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô ===")
    
    recipients = load_recipients()
    
    if not recipients:
        print(f"\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª {RECIPIENTS_FILE}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return
    
    print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
    for i, recipient in enumerate(recipients, 1):
        print(f"{i}. {recipient}")
    
    print(f"\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª {RECIPIENTS_FILE}")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def send_messages(config):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print_header()
    print("\n=== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = config.get_current_account()
    if not account:
        print("\n‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    if not account.connect():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not account.is_authorized():
        print("\n‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients = load_recipients()
    
    if not recipients:
        print(f"\n‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª {RECIPIENTS_FILE}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    me = account.get_me()
    if me:
        print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞: {me.first_name} {me.last_name or ''} (@{me.username or '–Ω–µ—Ç'})")
    else:
        print(f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞: {account.name}")
    
    print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
    
    # –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:")
    print("1. –í—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏")
    print("2. –í—ã–±—Ä–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ")
    
    selected_recipients = []
    
    if choice == "1":
        selected_recipients = recipients
    elif choice == "2":
        print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3,5):")
        try:
            indices = [int(idx.strip()) for idx in input().split(",")]
            for idx in indices:
                if 1 <= idx <= len(recipients):
                    selected_recipients.append(recipients[idx - 1])
        except:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            account.disconnect()
            return
    else:
        print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    if not selected_recipients:
        print("\n‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter, –∑–∞—Ç–µ–º Ctrl+D –∏–ª–∏ Ctrl+Z):")
    message_lines = []
    try:
        while True:
            line = input()
            message_lines.append(line)
    except (EOFError, KeyboardInterrupt):
        pass
    
    message = '\n'.join(message_lines)
    
    if not message.strip():
        print("\n‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 40)
    print(f"–ê–∫–∫–∞—É–Ω—Ç: {account.name}")
    print(f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected_recipients)}")
    print(f"–¢–µ–∫—Å—Ç: {message[:50]}{'...' if len(message) > 50 else ''}")
    print("=" * 40)
    
    confirm = input("\n–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π? (–¥–∞/–Ω–µ—Ç): ").lower()
    if confirm not in ["–¥–∞", "yes", "y", "–¥"]:
        print("\n‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        account.disconnect()
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    successful = 0
    failed = 0
    stop_sending = False
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    log_filename = f"–æ—Ç–ø—Ä–∞–≤–∫–∞_{timestamp}.txt"
    
    with open(log_filename, 'w', encoding='utf-8') as log:
        log.write("===== –û–¢–ß–ï–¢ –û–ë –û–¢–ü–†–ê–í–ö–ï –°–û–û–ë–©–ï–ù–ò–ô =====\n\n")
        log.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        log.write(f"–ê–∫–∫–∞—É–Ω—Ç: {account.name}\n")
        log.write(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected_recipients)}\n")
        log.write(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n\n")
        
        print(f"\n===== –ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò =====")
        
        for i, recipient in enumerate(selected_recipients, 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if account.send_message(recipient, message):
                    successful += 1
                    status = f"‚úì [{i}/{len(selected_recipients)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {recipient}"
                    print(status)
                    log.write(f"{status}\n")
                else:
                    failed += 1
                    status = f"‚úó [{i}/{len(selected_recipients)}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {recipient}"
                    print(status)
                    log.write(f"{status}\n")
                
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i < len(selected_recipients):
                    delay = 2 + random.uniform(0.5, 1.5)
                    time.sleep(delay)
                    
            except KeyboardInterrupt:
                print("\n–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                log.write("\n–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                stop_sending = True
                break
                    
            except Exception as e:
                failed += 1
                status = f"‚úó [{i}/{len(selected_recipients)}] –û—à–∏–±–∫–∞: {recipient} - {str(e)}"
                print(status)
                log.write(f"{status}\n")
                time.sleep(2)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        log.write("\n===== –ò–¢–û–ì–ò =====\n")
        log.write(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected_recipients)}\n")
        log.write(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n")
        log.write(f"–û—à–∏–±–æ–∫: {failed}\n")
        
        if selected_recipients and not stop_sending:
            success_rate = (successful / len(selected_recipients)) * 100
            log.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n")
    
    print(f"\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {log_filename}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 40)
    print("–ò–¢–û–ì–ò:")
    print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}")
    print(f"–û—à–∏–±–æ–∫: {failed}")
    
    if selected_recipients and not stop_sending:
        success_rate = (successful / len(selected_recipients)) * 100
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print("=" * 40)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    account.disconnect()
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏
    config.scan_sessions()
    
    while True:
        print_header()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        account = config.get_current_account()
        if account:
            print(f"\n–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç: {account.name}")
        else:
            print("\n–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é
        print_menu("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", [
            ("1", "–í–æ–π—Ç–∏ –≤ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"),
            ("2", "–í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
            ("3", "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"),
            ("4", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"),
            ("5", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"),
            ("0", "–í—ã—Ö–æ–¥")
        ])
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            # –í—Ö–æ–¥ –≤ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = login_account()
            if account:
                config.add_account(account)
        elif choice == "2":
            # –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            select_account(config)
        elif choice == "3":
            # –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            logout_account(config)
        elif choice == "4":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            send_messages(config)
        elif choice == "5":
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            view_recipients()
        elif choice == "0":
            # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            break
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    try:
        main_menu()
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")