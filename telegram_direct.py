import asyncio
import os
import sys
import logging
import random
from telethon import TelegramClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# Telegram API credentials
API_ID = os.environ.get('TELEGRAM_API_ID')
API_HASH = os.environ.get('TELEGRAM_API_HASH')

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
SESSION_FILE = "session_380664312381"

async def send_direct_message(recipient, message_text):
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    
    Args:
        recipient (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if not API_ID or not API_HASH:
        logger.error("API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
    client = TelegramClient(SESSION_FILE, int(API_ID), API_HASH)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å —Å–µ—Å—Å–∏–µ–π {SESSION_FILE}...")
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: id={me.id}, –∏–º—è={me.first_name} {me.last_name if me.last_name else ''}, username={me.username}, phone={me.phone}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é {recipient}...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ 
            try:
                user = await client.get_entity(recipient)
                logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {user.id}, {getattr(user, 'username', '–±–µ–∑ –∏–º–µ–Ω–∏')}")
            except Exception as user_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {recipient}: {str(user_error)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await client.send_message(recipient, message_text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID —Å–æ–æ–±—â–µ–Ω–∏—è: {result.id}")
            return True
            
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(send_error)}")
            return False
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram API")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python telegram_direct.py <–ø–æ–ª—É—á–∞—Ç–µ–ª—å> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        print("          –∏–ª–∏: python telegram_direct.py --file recipients.txt <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        print("–ü—Ä–∏–º–µ—Ä: python telegram_direct.py @username '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'")
        return
    
    # –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    if sys.argv[1] == "--file" and len(sys.argv) >= 4:
        filename = sys.argv[2]
        message = sys.argv[3]
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏
            with open(filename, 'r') as f:
                recipients = [line.strip() for line in f.readlines() if line.strip()]
            
            if not recipients:
                print(f"‚ùå –§–∞–π–ª {filename} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
                return
                
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message}' –¥–ª—è {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            successful = 0
            failed = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            for idx, recipient in enumerate(recipients, 1):
                print(f"\n[{idx}/{len(recipients)}] –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {recipient}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                result = await send_direct_message(recipient, message)
                
                if result:
                    successful += 1
                else:
                    failed += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if idx < len(recipients):
                    delay = random.uniform(1.5, 2.5)
                    print(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π...")
                    await asyncio.sleep(delay)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}")
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}")
            print(f"üìã –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {str(e)}")
            return
    
    # –†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    else:
        recipient = sys.argv[1]
        message = sys.argv[2]
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{message}' –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è {recipient}")
        
        result = await send_direct_message(recipient, message)
        
        if result:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == "__main__":
    asyncio.run(main())